# APIs

# Intro
Although the servers included in this project are designed to be used with the FUSE module, there is no reason why they should not be used in other contexts, such as other clients or interoperability with other types of systems. For such purposes, this document details the network APIs employed in this system by the metadata and data servers.
This document does not detail the FUSE API or any internal APIs used in this project.

# Common
All servers participating in this system utilize TCP for network connections. There is no default port, each server is free to use any available TCP port and these should be stored in configuration files for each server and client.
Servers will accept TCP packets in the following format:

/-----------------------------------------------------------------\
| 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 |
|-----------------------------------------------------------------|
|             OPCODE             |        LENGTH IN BYTES         |
|-----------------------------------------------------------------|
|      TYPE      |FILE DESCRIPTOR| DATA* (variable width)         |
\-----------------------------------------------------------------/


# Data Server
Data server commands are mostly named for the lower level syscall or filesystem operations the emulate.
Data servers must accept the following commands:

- Open
- Close
- Read
- Write
- Unlink
- Stat




# Metadata Server
Metadata servers must accept the following commands:
- Announce
- Query
- Register
- Heartbeat
- Close

- Announce (OPCODE=0x00)
This command announces a new node connecting to the network. The type feild should be defined as follows:
	TYPE:
		0x00: CLIENT - A new client is connecting to the network. The server must respond by emitting a relay command to all other metadata servers on the network.
		0x01: DATA SERVER - A new data server is connecting to the network. The server must respond by updating its internal tables with location and data exposed by the new server, and also by emitting an announce relay command to all other metadata servers to update their tables.
		0x02: METADATA SERVER - A new metadata server is connecting to the network. The server must respond by updating its internal tables with location of the new server, and also by emitting an announce relay command to all other metadata servers to update their tables.
		0x80: CLIENT RELAY - A new client has connect to another metadata server. The server may update its tables if required.
		0x81: DATA SERVER RELAY - A new data server has connect to another metadata server. The server must update its tables but must not emit any other commands to other servers.
		0x82: METADATA SERVER RELAY - A new metadata server has connect to another metadata server. The server must update its tables but must not emit any other commands to other servers.
	NOTE: The relay commands can be generated by combining the original command type with 0x80 using the bitwise OR operation.
The FILEDESCRIPTOR feild is not used and should be set to 0.
The DATA feild for this command is currently ignored, but in the future may be used for authentication of new nodes with the system.
This server must reply to this command with either an ACK (successfully connected) or NACK (denied).

- Query (OPCODE=0x01)
This command is issued by a client to retreive the real location of a specific file. The metadata server must respond with an ANSWER or with a NACK.

- Register (OPCODE=0x02)
This command is issued by a data server to register one or more files to be managed by the system. The metadata server must update its internal tables or respond with a NACK.

- Heartbeat (OPCODE=0x03)
This command is issued by data servers and clients on a regular basis* to notify a metadata server that the node is still active. A long enough absence of heartbeat commands from a specific node can cause a metadata server to trigger the metadata to issue a CLOSE RELAY command on behalf of the node or attempt to determine in other ways if the node is still active.

- Close (OPCODE=0x04)
This command is issued by a client, data server, or metadata server indicating that the node is no longer active, and the metadata server should update it's tables accordingly. If necessary, the server should also send a relay command to other metadata servers.
